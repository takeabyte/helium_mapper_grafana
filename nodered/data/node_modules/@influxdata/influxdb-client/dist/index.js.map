{"version":3,"file":"index.js","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/util/utf8Length.ts","../src/impl/node/nodeChunkCombiner.ts","../src/impl/version.ts","../src/impl/node/NodeHttpTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/QueryApiImpl.ts","../src/results/ObservableQuery.ts","../src/results/AnnotatedCSVResponseImpl.ts","../src/InfluxDB.ts","../src/Point.ts","../src/results/stringToLines.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare const TextDecoder: any\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e as Error)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * FluxTableColumn describes {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n\n  /**\n   * Get returns a JavaScript object of this column in the supplied result row, using default deserializers.\n   * @param row - a data row\n   * @returns column value\n   */\n  get: (row: string[]) => any\n}\n\nconst identity = (x: string): any => x\n\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n  public get(row: string[]): any {\n    let val = row[this.index]\n    if ((val === '' || val === undefined) && this.defaultValue) {\n      val = this.defaultValue\n    }\n    return (typeSerializers[this.dataType] ?? identity)(val)\n  }\n}\nexport const UNKNOWN_COLUMN: FluxTableColumn = Object.freeze({\n  label: '',\n  dataType: '',\n  group: false,\n  defaultValue: '',\n  index: Number.MAX_SAFE_INTEGER,\n  get: () => undefined,\n})\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {\n  FluxTableColumn,\n  UNKNOWN_COLUMN,\n  typeSerializers,\n} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @param errorOnMissingColumn - throw error on missing column (by default), return UNKNOWN_COLUMN when false\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string, errorOnMissingColumn?: boolean): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied row with the help of column descriptors.\n   * @param row - a row with data for each column\n   */\n  toObject(row: string[]): {[key: string]: any}\n\n  /**\n   * Gets column values out of the supplied row.\n   * @param row - a row with data for each column\n   * @param column - column name\n   * @returns column value, undefined for unknown column\n   */\n  get(row: string[], column: string): any\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string, errorOnMissingColumn = true): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    if (errorOnMissingColumn) {\n      throw new IllegalArgumentError(`Column ${label} not found!`)\n    }\n    return UNKNOWN_COLUMN\n  }\n  toObject(row: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < row.length; i++) {\n      const column = this.columns[i]\n      acc[column.label] = column.get(row)\n    }\n    return acc\n  }\n  get(row: string[], column: string): any {\n    return this.column(column, false).get(row)\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n  /**\n   * Default HTTP headers to send with every request.\n   */\n  headers?: Record<string, string>\n  /**\n   * Full HTTP web proxy URL including schema, for example http://your-proxy:8080.\n   */\n  proxyUrl?: string\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempt - count of already failed attempts to write the lines (1 ... maxRetries+1)\n   * @param expires - expiration time for the lines to be retried in millis since epoch\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempt: number,\n    expires: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max count of retries after the first write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records/lines to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n  /** max size of a batch in bytes */\n  maxBatchBytes: number\n  /** InfluxDB Enterprise write consistency as explained in https://docs.influxdata.com/enterprise_influxdb/v1.9/concepts/clustering/#write-consistency */\n  consistency?: 'any' | 'one' | 'quorum' | 'all'\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  maxBatchBytes: 50_000_000, // default max batch size in the cloud\n  flushInterval: 60000,\n  writeFailed: function() {},\n  writeSuccess: function() {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function(value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts of Point's timestamp to a string\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  if (typeof value === 'number') {\n    if (!isFinite(value)) {\n      throw new Error(`not a flux float: ${value}`)\n    }\n    return value.toString()\n  }\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n      continue\n    }\n    if (c !== '.' && c !== '-' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = sanitizeFloat(value)\n  for (const c of val) {\n    if (c === '.') {\n      throw new Error(`not a flux integer: ${val}`)\n    }\n  }\n  return new FluxParameter(val)\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  expires: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      delay = expires - Date.now()\n      retryTime = expires\n    }\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first.next = undefined\n        this.first = newFirst\n        if (!this.first) {\n          this.last = undefined\n        }\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      expires,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\nimport utf8Length from '../util/utf8Length'\n\nclass WriteBuffer {\n  length = 0\n  bytes = -1\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private maxBatchBytes: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    const size = utf8Length(record)\n    if (this.length === 0) {\n      this.scheduleSend()\n    } else if (this.bytes + size + 1 >= this.maxBatchBytes) {\n      // the new size already exceeds maxBatchBytes, send it\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n    this.lines[this.length] = record\n    this.length++\n    this.bytes += size + 1\n    if (\n      this.length >= this.maxChunkRecords ||\n      this.bytes >= this.maxBatchBytes\n    ) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    this.bytes = -1 // lines are joined with \\n\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    if (writeOptions?.consistency) {\n      this.httpPath += `&consistency=${encodeURIComponent(\n        writeOptions.consistency\n      )}`\n    }\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      this.writeOptions.maxBatchBytes,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    retryAttempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 1 - retryAttempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        const onRetry = self.writeOptions.writeFailed.call(\n          self,\n          error,\n          lines,\n          failedAttempts,\n          expires\n        )\n        if (onRetry) {\n          return onRetry\n        }\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts,\n              expires\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              retryAttempts > 0 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                retryAttempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.httpPath,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","/**\n * Utf8Length returns an expected length of a string when UTF-8 encoded.\n * @param s - input string\n * @returns expected count of bytes\n */\nexport default function utf8Length(s: string): number {\n  let retVal = s.length\n  // extends the size with code points (https://en.wikipedia.org/wiki/UTF-8#Encoding)\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i)\n    /* istanbul ignore else - JS does not count with 4-bytes UNICODE characters at the moment */\n    if (code < 0x80) {\n      continue\n    } else if (code >= 0x80 && code <= 0x7ff) {\n      retVal++\n    } else if (code >= 0x800 && code <= 0xffff) {\n      if (code >= 0xd800 && code <= 0xdfff) {\n        // node.js represents unicode characters above 0xffff by two UTF-16 surrogate halves\n        // see https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n        retVal++\n      } else {\n        retVal += 2\n      }\n    } else {\n      // never happens in node.js 14, the situation can vary in the futures or in deno/browsers\n      retVal += 3\n    }\n  }\n  return retVal\n}\n","import {Buffer} from 'buffer'\nimport {ChunkCombiner} from '../../results'\n\nconst nodeChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    return Buffer.concat([first, second])\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    return (chunk as Buffer).toString('utf-8', start, end)\n  },\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = Buffer.allocUnsafe(end - start)\n    ;(chunk as Buffer).copy(retVal, 0, start, end)\n    return retVal\n  },\n}\n\nexport default nodeChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.25.0'\n","import {ConnectionOptions, DEFAULT_ConnectionOptions} from '../../options'\nimport {parse} from 'url'\nimport * as http from 'http'\nimport * as https from 'https'\nimport {Buffer} from 'buffer'\nimport {RequestTimedOutError, AbortError, HttpError} from '../../errors'\nimport {Transport, SendOptions} from '../../transport'\nimport {\n  Cancellable,\n  ChunkCombiner,\n  CommunicationObserver,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\nimport nodeChunkCombiner from './nodeChunkCombiner'\nimport zlib from 'zlib'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {CLIENT_LIB_VERSION} from '../version'\nimport {Log} from '../../util/logger'\n\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH,\n}\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nclass CancellableImpl implements Cancellable {\n  private cancelled = false\n  cancel(): void {\n    this.cancelled = true\n  }\n  isCancelled(): boolean {\n    return this.cancelled\n  }\n}\n\n/**\n * Transport layer on top of node http or https library.\n */\nexport class NodeHttpTransport implements Transport {\n  /* required transport member */\n  readonly chunkCombiner: ChunkCombiner = nodeChunkCombiner\n\n  private defaultOptions: {[key: string]: any}\n  private requestApi: (\n    options: http.RequestOptions,\n    callback: (res: http.IncomingMessage) => void\n  ) => http.ClientRequest\n  private contextPath: string\n  private token?: string\n  private headers: Record<string, string>\n  /**\n   * Creates a node transport using for the client options supplied.\n   * @param connectionOptions - connection options\n   */\n  constructor(connectionOptions: ConnectionOptions) {\n    const {\n      url: _url,\n      proxyUrl,\n      token,\n      transportOptions,\n      ...nodeSupportedOptions\n    } = connectionOptions\n    const url = parse(proxyUrl || _url)\n    this.token = token\n    this.defaultOptions = {\n      ...DEFAULT_ConnectionOptions,\n      ...nodeSupportedOptions,\n      ...transportOptions,\n      port: url.port,\n      protocol: url.protocol,\n      hostname: url.hostname,\n    }\n    this.contextPath = proxyUrl ? _url : url.path ?? ''\n    if (this.contextPath.endsWith('/')) {\n      this.contextPath = this.contextPath.substring(\n        0,\n        this.contextPath.length - 1\n      )\n    }\n    // remove all undefined field to avoid node validation errors\n    // https://github.com/influxdata/influxdb-client-js/issues/380\n    Object.keys(this.defaultOptions).forEach(\n      key =>\n        this.defaultOptions[key] === undefined &&\n        delete this.defaultOptions[key]\n    )\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.contextPath.endsWith('/api/v2')) {\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${url.protocol}//${url.hostname}:${url.port} !`\n      )\n      this.contextPath = ''\n    }\n\n    if (url.protocol === 'http:') {\n      this.requestApi =\n        this.defaultOptions['follow-redirects']?.http?.request ?? http.request\n    } else if (url.protocol === 'https:') {\n      this.requestApi =\n        this.defaultOptions['follow-redirects']?.https?.request ?? https.request\n    } else {\n      throw new Error(\n        `Unsupported protocol \"${url.protocol} in URL: \"${connectionOptions.url}\"`\n      )\n    }\n    this.headers = {\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n      ...connectionOptions.headers,\n    }\n    if (proxyUrl) {\n      this.headers['Host'] = parse(_url).host as string\n    }\n  }\n\n  /**\n   * Sends data to server and receives communication events via communication callbacks.\n   *\n   * @param path - HTTP request  path\n   * @param body - message body\n   * @param headers - HTTP headers\n   * @param method - HTTP method\n   * @param callbacks - communication callbacks\n   */\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const cancellable = new CancellableImpl()\n    if (callbacks && callbacks.useCancellable)\n      callbacks.useCancellable(cancellable)\n    this.createRequestMessage(path, body, options).then(\n      (message: {[key: string]: any}) => {\n        this._request(message, cancellable, callbacks)\n      },\n      /* istanbul ignore next - hard to simulate failure, manually reviewed */\n      (err: Error) => callbacks?.error && callbacks.error(err)\n    )\n  }\n\n  /**\n   * Sends data to the server and receives decoded result. The type of the result depends on\n   * response's content-type (deserialized json, text).\n  \n   * @param path - HTTP path\n   * @param requestBody - request body\n   * @param options - send options\n   * @returns Promise of response body\n   */\n  request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    if (!body) {\n      body = ''\n    } else if (typeof body !== 'string') {\n      body = JSON.stringify(body)\n    }\n    let buffer = emptyBuffer\n    let contentType: string\n    let responseStatusCode: number | undefined\n    return new Promise((resolve, reject) => {\n      this.send(path, body as string, options, {\n        responseStarted(headers: Headers, statusCode?: number) {\n          if (responseStarted) {\n            responseStarted(headers, statusCode)\n          }\n          contentType = String(headers['content-type'])\n          responseStatusCode = statusCode\n        },\n        next: (data: Uint8Array): void => {\n          buffer = Buffer.concat([buffer, data])\n        },\n        complete: (): void => {\n          const responseType = options.headers?.accept ?? contentType\n          try {\n            if (responseStatusCode === 204) {\n              // ignore body of NO_CONTENT response\n              resolve(undefined)\n            }\n            if (responseType.includes('json')) {\n              if (buffer.length) {\n                resolve(JSON.parse(buffer.toString('utf8')))\n              } else {\n                resolve(undefined)\n              }\n            } else if (\n              responseType.includes('text') ||\n              responseType.startsWith('application/csv')\n            ) {\n              resolve(buffer.toString('utf8'))\n            } else {\n              resolve(buffer)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        },\n        error: (e: Error): void => {\n          reject(e)\n        },\n      })\n    })\n  }\n\n  /**\n   * Creates configuration for a specific request.\n   *\n   * @param path - API path starting with '/' and containing also query parameters\n   * @param headers - HTTP headers to use\n   * @param method - HTTP method\n   * @param body - request body, will be utf-8 encoded\n   * @returns a configuration object that is suitable for making the request\n   */\n  private createRequestMessage(\n    path: string,\n    body: string,\n    sendOptions: SendOptions\n  ): Promise<{[key: string]: any}> {\n    const bodyBuffer = Buffer.from(body, 'utf-8')\n    const headers: {[key: string]: any} = {\n      'content-type': 'application/json; charset=utf-8',\n      ...this.headers,\n    }\n    if (this.token) {\n      headers.authorization = 'Token ' + this.token\n    }\n    let bodyPromise = Promise.resolve(bodyBuffer)\n    const options: {[key: string]: any} = {\n      ...this.defaultOptions,\n      path: this.contextPath + path,\n      method: sendOptions.method,\n      headers: {\n        ...headers,\n        ...sendOptions.headers,\n      },\n    }\n    if (\n      sendOptions.gzipThreshold !== undefined &&\n      sendOptions.gzipThreshold < bodyBuffer.length\n    ) {\n      bodyPromise = bodyPromise.then(body => {\n        return new Promise((resolve, reject) => {\n          zlib.gzip(body, (err, res) => {\n            /* istanbul ignore next - hard to simulate failure, manually reviewed */\n            if (err) {\n              return reject(err)\n            }\n            options.headers['content-encoding'] = 'gzip'\n            return resolve(res)\n          })\n        })\n      })\n    }\n\n    return bodyPromise.then(bodyBuffer => {\n      options.body = bodyBuffer\n      options.headers['content-length'] = bodyBuffer.length\n      return options\n    })\n  }\n\n  private _request(\n    requestMessage: {[key: string]: any},\n    cancellable: CancellableImpl,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const listeners = completeCommunicationObserver(callbacks)\n    if (cancellable.isCancelled()) {\n      listeners.complete()\n      return\n    }\n    const req = this.requestApi(requestMessage, (res: http.IncomingMessage) => {\n      /* istanbul ignore next - hard to simulate failure, manually reviewed */\n      if (cancellable.isCancelled()) {\n        res.resume()\n        listeners.complete()\n        return\n      }\n      res.on('aborted', () => {\n        listeners.error(new AbortError())\n      })\n      res.on('error', listeners.error)\n      listeners.responseStarted(res.headers, res.statusCode)\n      /* istanbul ignore next statusCode is optional in http.IncomingMessage */\n      const statusCode = res.statusCode ?? 600\n      const contentEncoding = res.headers['content-encoding']\n      let responseData\n      if (contentEncoding === 'gzip') {\n        responseData = zlib.createGunzip(zlibOptions)\n        responseData.on('error', listeners.error)\n        res.pipe(responseData)\n      } else {\n        responseData = res\n      }\n      if (statusCode >= 300) {\n        let body = ''\n        const isJson = String(res.headers['content-type']).startsWith(\n          'application/json'\n        )\n        responseData.on('data', s => {\n          body += s.toString()\n          if (!isJson && body.length > 1000) {\n            body = body.slice(0, 1000)\n            res.resume()\n          }\n        })\n        responseData.on('end', () => {\n          if (body === '' && !!res.headers['x-influxdb-error']) {\n            body = res.headers['x-influxdb-error'].toString()\n          }\n          listeners.error(\n            new HttpError(\n              statusCode,\n              res.statusMessage,\n              body,\n              res.headers['retry-after'],\n              res.headers['content-type']\n            )\n          )\n        })\n      } else {\n        responseData.on('data', data => {\n          if (cancellable.isCancelled()) {\n            res.resume()\n          } else {\n            listeners.next(data)\n          }\n        })\n        responseData.on('end', listeners.complete)\n      }\n    })\n    // Support older Nodes which don't allow `timeout` in the\n    // request options\n    /* istanbul ignore else support older node versions */\n    if (typeof req.setTimeout === 'function' && requestMessage.timeout) {\n      req.setTimeout(requestMessage.timeout)\n    }\n\n    req.on('timeout', () => {\n      listeners.error(new RequestTimedOutError())\n    })\n    req.on('error', error => {\n      listeners.error(error)\n    })\n\n    /* istanbul ignore else support older node versions */\n    if (requestMessage.body) {\n      req.write(requestMessage.body)\n    }\n    req.end()\n  }\n}\nexport default NodeHttpTransport\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    return this.createCSVResponse(this.createExecutor(query))\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): APIExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n} from '../results'\nimport {Observable} from '../observable'\nimport {AnnotatedCSVResponse} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, observer =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, observer => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {AnnotatedCSVResponse, APIExecutor} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (executor: APIExecutor): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(executor, this.transport.chunkCombiner)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n"],"names":["createTextDecoderCombiner","decoder","TextDecoder","concat","first","second","retVal","Uint8Array","length","set","copy","chunk","start","end","subarray","toUtf8String","decode","chunksToLines","target","chunkCombiner","chunks","previous","finished","quoted","next","index","c","undefined","bufferReceived","e","this","error","complete","useCancellable","cancellable","self","cancel","isCancelled","LineSplitter","constructor","_reuse","reuse","val","reusedValues","Array","withReuse","splitLine","line","lastSplitLength","quoteCount","startIndex","values","count","i","getValue","push","substring","replace","identity","x","typeSerializers","boolean","unsignedLong","long","double","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","string","base64Binary","duration","FluxTableColumnImpl","get","row","defaultValue","_a","dataType","UNKNOWN_COLUMN","Object","freeze","label","group","MAX_SAFE_INTEGER","newFluxTableColumn","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","message","super","name","setPrototypeOf","prototype","HttpError","statusMessage","body","retryAfter","contentType","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","canRetry","RETRY_CODES","getRetryDelay","retryJitter","Math","round","random","RequestTimedOutError","AbortError","FluxTableMetaDataImpl","columns","forEach","col","column","errorOnMissingColumn","toObject","acc","createFluxTableMetaData","linesToTables","consumer","splitter","lastMeta","expectMeta","firstColumnIndex","size","slice","DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","minRetryDelay","maxRetryDelay","exponentialBase","randomRetry","DEFAULT_WriteOptions","batchSize","maxBatchBytes","flushInterval","writeFailed","writeSuccess","maxRetries","maxRetryTime","maxBufferLines","gzipThreshold","createEscaper","characters","replacements","value","from","found","indexOf","escape","measurement","escaper","createQuotedEscaper","tag","startHrMillis","startHrTime","useHrTime","useProcessHrtime","use","process","hrtime","lastMillis","Date","now","stepsInMillis","nanos","hrTime","millis","floor","String","substr","micros","trunc","seconds","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","convertTimeToNanos","consoleLogger","console","warn","provider","Log","FLUX_VALUE","Symbol","FluxParameter","fluxValue","toString","sanitizeString","prepareRetVal","charAt","sanitizeFloat","isFinite","dot","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","RegExp","isArray","map","join","symbolObservable","observable","RetryStrategyImpl","options","assign","success","nextDelay","failedAttempts","delay","max","currentDelay","min","RetryBuffer","maxLines","retryLines","nextRetryTime","closed","_timeoutHandle","addLines","lines","retryCount","expires","retryTime","origSize","newSize","newFirst","last","toAdd","scheduleRetry","removeLines","toRetry","setTimeout","then","catch","_e","flush","close","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","bytes","add","record","charCodeAt","utf8Length","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","httpPath","encodeURIComponent","consistency","defaultTags","useDefaultTags","sendOptions","method","headers","writeBuffer","_clearFlushTimeout","sendBatch","bind","retryStrategy","retryBuffer","retryAttempts","onRetry","call","reject","responseStatusCode","callbacks","responseStarted","_headers","send","writeRecord","writeRecords","records","writePoint","point","toLineProtocol","writePoints","points","withRetryBuffer","finally","remaining","dispose","tags","convertTime","nodeChunkCombiner","Buffer","allocUnsafe","zlibOptions","zlib","constants","Z_SYNC_FLUSH","finishFlush","emptyBuffer","CancellableImpl","cancelled","NodeHttpTransport","connectionOptions","url","_url","proxyUrl","token","transportOptions","nodeSupportedOptions","__rest","defaultOptions","port","protocol","hostname","contextPath","path","endsWith","keys","key","requestApi","_d","_b","http","request","_g","https","host","createRequestMessage","_request","err","stringify","buffer","data","responseType","accept","bodyBuffer","authorization","bodyPromise","gzip","res","requestMessage","listeners","state","completeCommunicationObserver","req","resume","on","responseData","createGunzip","pipe","isJson","write","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","createCSVResponse","with","response","query","createExecutor","rows","queryLines","consumeLines","queryRows","consumeRows","collectRows","rowMapper","collectLines","queryRaw","type","decorateRequest","dialect","QuerySubscription","observer","executor","isClosed","unsubscribe","noop","ObservableQuery","decorator","subscribe","observerOrNext","completeObserver","defaultRowMapping","tableMeta","AnnotatedCSVResponseImpl","_options","TransportImpl","processCSVResponse","getWriteApi","getQueryApi","measurementName","fields","booleanField","intField","isNaN","uintField","strVal","localeCompare","floatField","parseFloat","stringField","timestamp","time","settings","fieldsLine","sort","tagsLine","object","Boolean","strings","parts","partIndex","text","sanitized","sanitizeDateTime","logger","source"],"mappings":"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"}