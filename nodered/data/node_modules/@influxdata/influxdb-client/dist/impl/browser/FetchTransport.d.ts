import { Transport, SendOptions } from '../../transport';
import { ConnectionOptions } from '../../options';
import { ChunkCombiner, CommunicationObserver, ResponseStartedFn } from '../../results';
/**
 * Transport layer that use browser fetch.
 */
export default class FetchTransport implements Transport {
    private connectionOptions;
    chunkCombiner: ChunkCombiner;
    private defaultHeaders;
    private url;
    constructor(connectionOptions: ConnectionOptions);
    send(path: string, body: string, options: SendOptions, callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined): void;
    request(path: string, body: any, options: SendOptions, responseStarted?: ResponseStartedFn): Promise<any>;
    private fetch;
    /**
     * RequestDecorator allows to modify requests before sending.
     *
     * The following example shows a function that adds gzip
     * compression of requests using pako.js.
     *
     * ```ts
     * const client = new InfluxDB({url: 'http://a'})
     * client.transport.requestDecorator = function(request, options) {
     *   const body = request.body
     *   if (
     *     typeof body === 'string' &&
     *     options.gzipThreshold !== undefined &&
     *     body.length > options.gzipThreshold
     *   ) {
     *     request.headers['content-encoding'] = 'gzip'
     *     request.body = pako.gzip(body)
     *   }
     * }
     * ```
     */
    requestDecorator: (request: RequestInit, options: SendOptions, url: string) => void;
}
//# sourceMappingURL=FetchTransport.d.ts.map