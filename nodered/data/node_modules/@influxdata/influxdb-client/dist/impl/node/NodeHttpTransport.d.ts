import { ConnectionOptions } from '../../options';
import { Transport, SendOptions } from '../../transport';
import { ChunkCombiner, CommunicationObserver, ResponseStartedFn } from '../../results';
/**
 * Transport layer on top of node http or https library.
 */
export declare class NodeHttpTransport implements Transport {
    readonly chunkCombiner: ChunkCombiner;
    private defaultOptions;
    private requestApi;
    private contextPath;
    private token?;
    private headers;
    /**
     * Creates a node transport using for the client options supplied.
     * @param connectionOptions - connection options
     */
    constructor(connectionOptions: ConnectionOptions);
    /**
     * Sends data to server and receives communication events via communication callbacks.
     *
     * @param path - HTTP request  path
     * @param body - message body
     * @param headers - HTTP headers
     * @param method - HTTP method
     * @param callbacks - communication callbacks
     */
    send(path: string, body: string, options: SendOptions, callbacks?: Partial<CommunicationObserver<any>>): void;
    /**
     * Sends data to the server and receives decoded result. The type of the result depends on
     * response's content-type (deserialized json, text).
    
     * @param path - HTTP path
     * @param requestBody - request body
     * @param options - send options
     * @returns Promise of response body
     */
    request(path: string, body: any, options: SendOptions, responseStarted?: ResponseStartedFn): Promise<any>;
    /**
     * Creates configuration for a specific request.
     *
     * @param path - API path starting with '/' and containing also query parameters
     * @param headers - HTTP headers to use
     * @param method - HTTP method
     * @param body - request body, will be utf-8 encoded
     * @returns a configuration object that is suitable for making the request
     */
    private createRequestMessage;
    private _request;
}
export default NodeHttpTransport;
//# sourceMappingURL=NodeHttpTransport.d.ts.map