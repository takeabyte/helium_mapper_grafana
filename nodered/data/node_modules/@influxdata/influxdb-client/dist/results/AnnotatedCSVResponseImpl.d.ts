import { CommunicationObserver, FluxResultObserver, FluxTableMetaData, Row, ChunkCombiner } from '../results';
import { Observable } from '../observable';
import { AnnotatedCSVResponse } from './AnnotatedCSVResponse';
import { APIExecutor } from './ObservableQuery';
export declare function defaultRowMapping(values: string[], tableMeta: FluxTableMetaData): Record<string, any>;
/**
 * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse
 * that uses the supplied executor to supply a response data stream.
 */
export declare class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {
    private executor;
    private chunkCombiner;
    constructor(executor: APIExecutor, chunkCombiner: ChunkCombiner);
    lines(): Observable<string>;
    rows(): Observable<Row>;
    consumeLines(consumer: CommunicationObserver<string>): void;
    consumeRows(consumer: FluxResultObserver<string[]>): void;
    collectRows<T>(rowMapper?: (values: string[], tableMeta: FluxTableMetaData) => T | undefined): Promise<Array<T>>;
    collectLines(): Promise<Array<string>>;
}
//# sourceMappingURL=AnnotatedCSVResponseImpl.d.ts.map