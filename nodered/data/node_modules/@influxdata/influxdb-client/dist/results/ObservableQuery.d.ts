import { Observable, Observer, ObserverComplete, ObserverError, ObserverNext, Subscription } from '../observable';
import { CommunicationObserver } from '../results/CommunicationObserver';
/** APIExecutor executes the API and passes its response to the supplied consumer */
export declare type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void;
declare type Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>;
export default class ObservableQuery<T> implements Observable<T> {
    private readonly executor;
    private readonly decorator;
    constructor(executor: APIExecutor, decorator: Decorator<T>);
    subscribe(observerOrNext?: Partial<Observer<T>> | ObserverNext<T>, error?: ObserverError, complete?: ObserverComplete): Subscription;
    [Symbol.observable]: () => this;
}
export {};
//# sourceMappingURL=ObservableQuery.d.ts.map