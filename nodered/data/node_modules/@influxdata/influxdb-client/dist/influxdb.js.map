{"version":3,"file":"influxdb.js","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/results/stringToLines.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/util/utf8Length.ts","../src/impl/WriteApiImpl.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/browser/FetchTransport.ts","../src/impl/QueryApiImpl.ts","../src/results/ObservableQuery.ts","../src/results/AnnotatedCSVResponseImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare const TextDecoder: any\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e as Error)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * FluxTableColumn describes {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n\n  /**\n   * Get returns a JavaScript object of this column in the supplied result row, using default deserializers.\n   * @param row - a data row\n   * @returns column value\n   */\n  get: (row: string[]) => any\n}\n\nconst identity = (x: string): any => x\n\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n  public get(row: string[]): any {\n    let val = row[this.index]\n    if ((val === '' || val === undefined) && this.defaultValue) {\n      val = this.defaultValue\n    }\n    return (typeSerializers[this.dataType] ?? identity)(val)\n  }\n}\nexport const UNKNOWN_COLUMN: FluxTableColumn = Object.freeze({\n  label: '',\n  dataType: '',\n  group: false,\n  defaultValue: '',\n  index: Number.MAX_SAFE_INTEGER,\n  get: () => undefined,\n})\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {\n  FluxTableColumn,\n  UNKNOWN_COLUMN,\n  typeSerializers,\n} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @param errorOnMissingColumn - throw error on missing column (by default), return UNKNOWN_COLUMN when false\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string, errorOnMissingColumn?: boolean): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied row with the help of column descriptors.\n   * @param row - a row with data for each column\n   */\n  toObject(row: string[]): {[key: string]: any}\n\n  /**\n   * Gets column values out of the supplied row.\n   * @param row - a row with data for each column\n   * @param column - column name\n   * @returns column value, undefined for unknown column\n   */\n  get(row: string[], column: string): any\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string, errorOnMissingColumn = true): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    if (errorOnMissingColumn) {\n      throw new IllegalArgumentError(`Column ${label} not found!`)\n    }\n    return UNKNOWN_COLUMN\n  }\n  toObject(row: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < row.length; i++) {\n      const column = this.columns[i]\n      acc[column.label] = column.get(row)\n    }\n    return acc\n  }\n  get(row: string[], column: string): any {\n    return this.column(column, false).get(row)\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n  /**\n   * Default HTTP headers to send with every request.\n   */\n  headers?: Record<string, string>\n  /**\n   * Full HTTP web proxy URL including schema, for example http://your-proxy:8080.\n   */\n  proxyUrl?: string\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempt - count of already failed attempts to write the lines (1 ... maxRetries+1)\n   * @param expires - expiration time for the lines to be retried in millis since epoch\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempt: number,\n    expires: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max count of retries after the first write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records/lines to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n  /** max size of a batch in bytes */\n  maxBatchBytes: number\n  /** InfluxDB Enterprise write consistency as explained in https://docs.influxdata.com/enterprise_influxdb/v1.9/concepts/clustering/#write-consistency */\n  consistency?: 'any' | 'one' | 'quorum' | 'all'\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  maxBatchBytes: 50_000_000, // default max batch size in the cloud\n  flushInterval: 60000,\n  writeFailed: function() {},\n  writeSuccess: function() {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function(value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts of Point's timestamp to a string\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  if (typeof value === 'number') {\n    if (!isFinite(value)) {\n      throw new Error(`not a flux float: ${value}`)\n    }\n    return value.toString()\n  }\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n      continue\n    }\n    if (c !== '.' && c !== '-' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = sanitizeFloat(value)\n  for (const c of val) {\n    if (c === '.') {\n      throw new Error(`not a flux integer: ${val}`)\n    }\n  }\n  return new FluxParameter(val)\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  expires: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      delay = expires - Date.now()\n      retryTime = expires\n    }\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first.next = undefined\n        this.first = newFirst\n        if (!this.first) {\n          this.last = undefined\n        }\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      expires,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","/**\n * Utf8Length returns an expected length of a string when UTF-8 encoded.\n * @param s - input string\n * @returns expected count of bytes\n */\nexport default function utf8Length(s: string): number {\n  let retVal = s.length\n  // extends the size with code points (https://en.wikipedia.org/wiki/UTF-8#Encoding)\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i)\n    /* istanbul ignore else - JS does not count with 4-bytes UNICODE characters at the moment */\n    if (code < 0x80) {\n      continue\n    } else if (code >= 0x80 && code <= 0x7ff) {\n      retVal++\n    } else if (code >= 0x800 && code <= 0xffff) {\n      if (code >= 0xd800 && code <= 0xdfff) {\n        // node.js represents unicode characters above 0xffff by two UTF-16 surrogate halves\n        // see https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n        retVal++\n      } else {\n        retVal += 2\n      }\n    } else {\n      // never happens in node.js 14, the situation can vary in the futures or in deno/browsers\n      retVal += 3\n    }\n  }\n  return retVal\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\nimport utf8Length from '../util/utf8Length'\n\nclass WriteBuffer {\n  length = 0\n  bytes = -1\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private maxBatchBytes: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    const size = utf8Length(record)\n    if (this.length === 0) {\n      this.scheduleSend()\n    } else if (this.bytes + size + 1 >= this.maxBatchBytes) {\n      // the new size already exceeds maxBatchBytes, send it\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n    this.lines[this.length] = record\n    this.length++\n    this.bytes += size + 1\n    if (\n      this.length >= this.maxChunkRecords ||\n      this.bytes >= this.maxBatchBytes\n    ) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    this.bytes = -1 // lines are joined with \\n\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    if (writeOptions?.consistency) {\n      this.httpPath += `&consistency=${encodeURIComponent(\n        writeOptions.consistency\n      )}`\n    }\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      this.writeOptions.maxBatchBytes,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    retryAttempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 1 - retryAttempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        const onRetry = self.writeOptions.writeFailed.call(\n          self,\n          error,\n          lines,\n          failedAttempts,\n          expires\n        )\n        if (onRetry) {\n          return onRetry\n        }\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts,\n              expires\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              retryAttempts > 0 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                retryAttempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.httpPath,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Log} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n      ...connectionOptions.headers,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Log.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamDefaultReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function() {}\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    return this.createCSVResponse(this.createExecutor(query))\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): APIExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n} from '../results'\nimport {Observable} from '../observable'\nimport {AnnotatedCSVResponse} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, observer =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, observer => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {AnnotatedCSVResponse, APIExecutor} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (executor: APIExecutor): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(executor, this.transport.chunkCombiner)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n"],"names":["TransportImpl"],"mappings":"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"}